name: CI

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: windows-latest

    env:
      SH_VERSION_SUFFIX: preview

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.x'

      - name: Get Latest NuGet Version
        id: get_version
        run: |
            VERSION=$(curl -sL "https://api.nuget.org/v3/registration5-gz-semver2/entrustsignhostclientlibrary/index.json" | gunzip -c | jq -r '.items[].items[].catalogEntry.version' | grep '^3' | sort -V | tail -n 1)
            echo "LATEST_VERSION=${VERSION}" >> $GITHUB_ENV
            echo "Latest version: $VERSION"
            IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"

            # Increment the patch version (the third component)
            PATCH_VERSION=${VERSION_PARTS[2]}
            PATCH_VERSION=$((PATCH_VERSION + 1))

            # Recombine the version (major.minor.patch)
            NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION"

            # Set the new version as the environment variable
            echo "LATEST_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

            # Print the new version
            echo "Latest version: $NEW_VERSION"
        shell: bash

      - name: Clear NuGet Cache
        run: dotnet nuget locals all --clear

      - name: Install Coverlet
        run: dotnet add src/SignhostAPIClient.Tests/SignhostAPIClient.Tests.csproj package coverlet.msbuild --version 3.1.0

      - name: Restore NuGet packages
        run: dotnet restore src/SignhostAPIClient.sln

      - name: Build solution
        run: dotnet build src/SignhostAPIClient.sln -c release

      - name: Test with Coverage
        run: dotnet test --no-build src/SignhostAPIClient.Tests/SignhostAPIClient.Tests.csproj --collect:"XPlat Code Coverage" -c Release

      - name: Pack
        run: dotnet pack src/SignhostAPIClient/SignhostAPIClient.csproj /p:Version=${{ env.LATEST_VERSION }}
        if: github.ref == 'refs/heads/master'

      - name: Upload NuGet Package
        uses: actions/upload-artifact@v3
        with:
          name: Nuget
          path: '**/*.nupkg'
        if: github.ref == 'refs/heads/master'

      - name: Publish NuGet Package
        run: |
          dotnet nuget push '**/*.nupkg' --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_KEY }}
        if: github.ref == 'refs/heads/master'
